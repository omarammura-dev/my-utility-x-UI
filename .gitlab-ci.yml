image: node:21-alpine

stages:
  - build
  - deploy

cache:
  paths:
    - node_modules/

build:
  stage: build
  before_script:
    - apk add --no-cache --upgrade bash
    - apk add --no-cache git
  script:
    - npm ci
    - npm run build --prod


build image:
  stage: build-docker
  image: docker
  services:
    - docker:dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
  only:
    - main      

# deploy:
#   stage: deploy
#   before_script:
#     - apk add --no-cache --upgrade bash
#     - apk add --no-cache git
#     - apk add --no-cache openssh-client
#   script:
#     - pwd
#     - npm ci
#     - npm run build --prod
#     - ls -la dist
#     - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
#     - eval $(ssh-agent -s) && echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
#     - eval $(ssh-agent -s) && echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#     - scp -o StrictHostKeyChecking=no -r dist/front-end $USER@$IP_ADDRESS:/tmp/angular-dist/
#     - ssh $USER@$IP_ADDRESS "bash /home/ubuntu/deployments/deploy.sh"
#   artifacts:
#     paths:
#       - dist/front-end
#   only:
#     - main  
deploy:
  stage: deploy
  script:
    - 'which ssh-agent || ( apk update && apk add openssh-client )'
    - eval $(ssh-agent -s) && echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh $USER@$IP_ADDRESS "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - ssh $USER@$IP_ADDRESS "docker pull $CI_REGISTRY_IMAGE"
    - ssh $USER@$IP_ADDRESS "docker stop mux-frontend || true && docker rm mux-frontend || true"
    - ssh $USER@$IP_ADDRESS "docker run -d --name mux-frontend -p 8080:8080 -e MONGO_URL=$MONGO_URL -e MONGO_DB_NAME=$MONGO_DB_NAME -e API_URL=$API_URL -e UI_URL=$UI_URL $CI_REGISTRY_IMAGE"
  artifacts:
    paths:
      - myutilityx.com  
  only:
    - main 